# Snakefile
from pathlib import Path

shell.executable("/bin/bash")

# ---- Paths ----
SCRIPTS_SRC = "script"                 # .cxx lives here
BUILD_DIR   = "build"
BIN_DIR     = f"{BUILD_DIR}/bin/scripts"
DATA_DIRS   = ["data/beamtests", "data/labtests"]
DUMP_DIR    = "dump"
LOG_DIR     = "log"

EXES = ["100_RootConverter", "101_EventRecon", "102_EventMatch", "103_HitMap", "104_ADC_Analysis"]

# ---- Discover valid (dtype, run) pairs ----
pairs = []
for folder in DATA_DIRS:
    dtype = Path(folder).name  # "beamtests" or "labtests"
    for f in Path(folder).glob("Run*.ch2g"):
        if f.name.startswith('.') or not f.is_file():
            continue
        pairs.append({"dtype": dtype, "run": f.stem})

# Final analysis targets (only for discovered runs)
FINAL_TARGETS_HITMAP = [f"{DUMP_DIR}/103_HitMap/{p['dtype']}/{p['run']}.root" for p in pairs]
FINAL_TARGETS_ADC = [f"{DUMP_DIR}/104_ADC_Analysis/{p['dtype']}/{p['run']}.root" for p in pairs]
# Also require all executables be present
FINAL_EXES = [f"{BIN_DIR}/{name}" for name in EXES]

rule all:
    input:
        FINAL_EXES,
        FINAL_TARGETS_HITMAP,
        FINAL_TARGETS_ADC

# =========================
# Build system integration
# =========================

# Configure CMake once (stamp file)
rule cmake_configure:
    output:
        touch(f"{BUILD_DIR}/.cmake_configured")
    log:
        f"{LOG_DIR}/build/configure.log"
    shell:
        r"""
        mkdir -p {BUILD_DIR}
        mkdir -p {LOG_DIR}/build
        cmake -S . -B {BUILD_DIR} > {log} 2>&1
        """

# Build any executable target via CMake (single rule, wildcarded)
rule build_exe:
    input:
        cfg = rules.cmake_configure.output[0],
        src = lambda wc: f"{SCRIPTS_SRC}/{wc.name}.cxx"
    output:
        exe = f"{BIN_DIR}/{{name}}"
    log:
        f"{LOG_DIR}/build/{{name}}.log"
    shell:
        r"""
        mkdir -p {BIN_DIR}
        cmake --build {BUILD_DIR} --target {wildcards.name} -j > {log} 2>&1
        """

# =========================
# Data processing pipeline
# =========================

# Stage 100: RootConverter
rule RootConverter:
    input:
        exe   = f"{BIN_DIR}/100_RootConverter",
        ch2g  = lambda wc: f"data/{wc.dtype}/{wc.run}.ch2g"
    output:
        root  = f"{DUMP_DIR}/100_RootConverter/{{dtype}}/{{run}}.root"
    log:
        f"{LOG_DIR}/100_RootConverter/{{dtype}}/{{run}}.log"
    shell:
        r"""
        mkdir -p {DUMP_DIR}/100_RootConverter/{wildcards.dtype}
        mkdir -p {LOG_DIR}/100_RootConverter/{wildcards.dtype}
        "{input.exe}" -i "{input.ch2g}" -o "{output.root}" > "{log}" 2>&1
        """

# Stage 101: EventRecon
rule EventRecon:
    input:
        exe     = f"{BIN_DIR}/101_EventRecon",
        root_in = f"{DUMP_DIR}/100_RootConverter/{{dtype}}/{{run}}.root"
    output:
        root_out = f"{DUMP_DIR}/101_EventRecon/{{dtype}}/{{run}}.root"
    log:
        f"{LOG_DIR}/101_EventRecon/{{dtype}}/{{run}}.log"
    shell:
        r"""
        mkdir -p {DUMP_DIR}/101_EventRecon/{wildcards.dtype}
        mkdir -p {LOG_DIR}/101_EventRecon/{wildcards.dtype}
        "{input.exe}" -f "{input.root_in}" -o "{output.root_out}" > "{log}" 2>&1
        """

# Stage 102: EventMatch
rule EventMatch:
    input:
        exe     = f"{BIN_DIR}/102_EventMatch",
        root_in = f"{DUMP_DIR}/101_EventRecon/{{dtype}}/{{run}}.root"
    output:
        root_out = f"{DUMP_DIR}/102_EventMatch/{{dtype}}/{{run}}.root"
    log:
        f"{LOG_DIR}/102_EventMatch/{{dtype}}/{{run}}.log"
    shell:
        r"""
        mkdir -p {DUMP_DIR}/102_EventMatch/{wildcards.dtype}
        mkdir -p {LOG_DIR}/102_EventMatch/{wildcards.dtype}
        "{input.exe}" -f "{input.root_in}" -o "{output.root_out}" > "{log}" 2>&1
        """

# Stage 103: HitMap
rule HitMap:
    input:
        exe     = f"{BIN_DIR}/103_HitMap",
        root_in = f"{DUMP_DIR}/102_EventMatch/{{dtype}}/{{run}}.root"
    output:
        root_out = f"{DUMP_DIR}/103_HitMap/{{dtype}}/{{run}}.root"
    log:
        f"{LOG_DIR}/103_HitMap/{{dtype}}/{{run}}.log"
    shell:
        r"""
        mkdir -p {DUMP_DIR}/103_HitMap/{wildcards.dtype}
        mkdir -p {LOG_DIR}/103_HitMap/{wildcards.dtype}
        "{input.exe}" -f "{input.root_in}" -o "{output.root_out}" > "{log}" 2>&1
        """

# Stage 104: ADC_Analysis
rule ADC_Analysis:
    input:
        exe     = f"{BIN_DIR}/104_ADC_Analysis",
        root_in = f"{DUMP_DIR}/102_EventMatch/{{dtype}}/{{run}}.root"
    output:
        root_out = f"{DUMP_DIR}/104_ADC_Analysis/{{dtype}}/{{run}}.root"
    log:
        f"{LOG_DIR}/104_ADC_Analysis/{{dtype}}/{{run}}.log"
    shell:
        r"""
        mkdir -p {DUMP_DIR}/104_ADC_Analysis/{wildcards.dtype}
        mkdir -p {LOG_DIR}/104_ADC_Analysis/{wildcards.dtype}
        "{input.exe}" -f "{input.root_in}" -o "{output.root_out}" > "{log}" 2>&1
        """