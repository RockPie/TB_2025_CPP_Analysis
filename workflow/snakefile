# Snakefile (fixed)
import os
from pathlib import Path

shell.executable("/bin/bash")

# ---- Config (optional caps) ----
EVENTS_101 = int(config.get("events_101", -1))
EVENTS_102 = int(config.get("events_102", -1))

# ---- Executables built by CMake ----
EXE_100 = "build/bin/scripts/100_RootConverter"
EXE_101 = "build/bin/scripts/101_EventRecon"
EXE_102 = "build/bin/scripts/102_EventMatch"

# ---- Source tracking for rebuilds ----
CMAKE_TOP = "CMakeLists.txt"
SCRIPT_SOURCES = sorted(map(str, Path("script").glob("*.cxx"))) + \
                 sorted(map(str, Path("script").glob("*.cpp")))
INCLUDE_HEADERS = sorted(map(str, Path("include").rglob("*"))) if Path("include").exists() else []

# ---- Discover input data (flat files under each dir) ----
def _regular_nonhidden_files(folder):
    p = Path(folder)
    if not p.exists():
        return []
    return [
        x.name
        for x in p.glob("*")          # '*' won't match dotfiles, but keep an explicit guard anyway
        if x.is_file() and not x.name.startswith(".")
    ]

LAB_BASES  = _regular_nonhidden_files("data/labtests")
BEAM_BASES = _regular_nonhidden_files("data/beamtests")

# Final targets
ALL_OUTPUTS = \
    [f"dump/102_EventMatch/labtests/{b}.root"  for b in LAB_BASES] + \
    [f"dump/102_EventMatch/beamtests/{b}.root" for b in BEAM_BASES]

rule all:
    input: ALL_OUTPUTS

# ---------------- CMake build ----------------
rule cmake_configure:
    input:  CMAKE_TOP
    output: touch("build/.configured")
    shell:  r"""
        mkdir -p build
        cmake -S . -B build
        touch {output}
    """

rule build_scripts:
    input:
        "build/.configured",
        CMAKE_TOP,
        SCRIPT_SOURCES,
        INCLUDE_HEADERS
    output:
        EXE_100,
        EXE_101,
        EXE_102
    shell:  r"""
        cmake --build build --target all_scripts -j
        test -x {output[0]} && test -x {output[1]} && test -x {output[2]}
    """

# ---------------- Pipeline ----------------
# 100: -i <raw> -o <root>
rule root_converter:
    input:
        exe=EXE_100,
        raw=lambda w: f"data/{w.dataset}/{w.base}"
    output:
        "dump/100_RootConverter/{dataset}/{base}.root"
    run:
        Path(Path(output[0]).parent).mkdir(parents=True, exist_ok=True)
        shell(r'"{input.exe}" -i "{input.raw}" -o "{output}"')

# 101: -f <in.root> -o <out.root> -e <events>
rule event_recon:
    input:
        exe=EXE_101,
        inroot="dump/100_RootConverter/{dataset}/{base}.root"
    output:
        "dump/101_EventRecon/{dataset}/{base}.root"
    params:
        events=lambda w: EVENTS_101
    run:
        Path(Path(output[0]).parent).mkdir(parents=True, exist_ok=True)
        shell(r'"{input.exe}" -f "{input.inroot}" -o "{output}" -e {params.events}')

# 102: -f <in.root> -o <out.root> -e <events>
rule event_match:
    input:
        exe=EXE_102,
        inroot="dump/101_EventRecon/{dataset}/{base}.root"
    output:
        "dump/102_EventMatch/{dataset}/{base}.root"
    params:
        events=lambda w: EVENTS_102
    run:
        Path(Path(output[0]).parent).mkdir(parents=True, exist_ok=True)
        shell(r'"{input.exe}" -f "{input.inroot}" -o "{output}" -e {params.events}')